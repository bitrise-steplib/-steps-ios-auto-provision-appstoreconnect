title: iOS Auto Provision with App Store Connect API
summary: Automatically manages your iOS Provisioning Profiles for your Xcode project.
description: |-
  The Step uses the official [App Store Connect API](https://developer.apple.com/documentation/appstoreconnectapi/generating_tokens_for_api_requests). 
  The Steps performs the following:
  - It generates, updates and downloads the provisioning profiles needed for your iOS project.
  - It verifies if your project is registered with the App Store Connect. If it was not, the Step registers your project.
  - It registers the iOS devices connected to your Bitrise account with the App Store Connect.
  - It modifies the iOS project to use manual code signing if the project uses automatically managed signing.

  ### Configuring the Step

  Before you start configuring the Step, make sure you've completed the following requirements:
  1. You've generated an [API key](https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api) and obtained an **Issuer ID**, **Key ID** and a **Private Key**.
  2. You've [defined your Apple Developer Account to Bitrise](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#defining-your-apple-developer-account-to-bitrise).
  3. You've [assigned an Apple Developer Account to your app](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#assigning-an-apple-developer-account-for-your-app).

  Once these are done, most of the required Step input fields are already populated for you.

  To configure the Step:

  1. Add the **iOS Auto Provision with App Store Connect API** after any dependency installer Step in your Workflow, such as **Run CocoaPods install** or **Carthage**.

  2. Click the Step to edit its input fields. You can see that the **Build API token**, **Build URL**, and the **Xcode Project (or Workspace) path** inputs are automatically filled out for you.

  - **Build API token**: Every running build has a temporary API token on a Bitrise virtual machine. This token is only available while the build is running. The Step downloads the connected API key with the help of this API token and Bitrise saves it in a JSON file.

  - **Build URL**: URL of the current build or local path URL to your `apple_developer_portal_data.json`.

  - **Xcode Project path**: The path where the `.xcodeproj` / `.xcworkspace` is located.

  3. **Distribution type** input's value has to match with the value of the **Select method for export** input in the **Xcode Archive & Export for iOS** Step.

  4. With the **Scheme name** input you can restrict which targets to process.

  ### Troubleshooting
  Make sure you do not have the **Certificate and Profile Installer** Step in your Workflow.
  Make sure that you do NOT modify your Xcode project between the **iOS Auto Provision with App Store Connect API** and the **Xcode Archive & Export for iOS** Steps. For example, do not change the **bundle ID** after the **iOS Auto Provision with App Store Connect API** Step.

  ### Useful links
  - [Managing iOS code signing files - automatic provisioning](https://devcenter.bitrise.io/code-signing/ios-code-signing/ios-auto-provisioning/)
  - [About iOS Auto Provision with Apple ID](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#assigning-an-apple-developer-account-for-your-appv)

  ### Related Steps
  - [iOS Auto Provision with Apple ID](https://www.bitrise.io/integrations/steps/ios-auto-provision)
  - [Xcode Archive & Export](https://www.bitrise.io/integrations/steps/xcode-archive)
website: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
source_code_url: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
support_url: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect/issues

project_type_tags:
  - ios

type_tags:
  - code-sign

is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: ".IsCI"

toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect

inputs:
  - connection: "automatic"
    opts:
      title: Bitrise Apple Developer Connection
      summary: The Apple Service authentication method the Step uses. By default, the Bitrise Apple Developer connection based on API key is used and other authentication-related Step inputs are ignored.
      description: |-
        The input determines the method used for Apple Service authentication. By default, the Bitrise Apple Developer connection based on API key is used and other authentication-related Step inputs are ignored.
        
        You can either use the established Bitrise Apple Developer connection or you can tell the Step to only use the Step inputs for authentication.
        - `automatic`: Use the Apple Developer connection based on API key. Step inputs are only used as a fallback.
        - `api_key`: Use the Apple Developer connection based on API key authentication. Authentication-related Step inputs are ignored.
        - `off`: Do not use any already configured Apple Developer Connection. Only authentication-related Step inputs are considered.
      is_required: true
      value_options:
      - "automatic"
      - "api_key"
      - "off"
  - api_key_path: ""
    opts:
      title: "API Key URL"
      summary: Path to local or remote file
      description: |-
        Specify the path in an URL format where your API key is stored.
        
        For example: `https://URL/TO/AuthKey_something.p8` or `file:///PATH/TO/AuthKey_something.p8`
        
        You can upload your key on the **Generic File Storage** tab in the Workflow Editor and set the Environment Variable for the file here.
        
        For example: `$BITRISEIO_MYKEY_URL`
      is_sensitive: true
  - api_issuer: ""
    opts:
      title: "API Key Issuer ID"
      description: |-
        Issuer ID. Required if **API Key URL** (`api_key_path`) is specified.
  - distribution_type: development
    opts:
      title: Distribution type
      description: Describes how Xcode should sign your project.
      value_options:
        - "development"
        - "app-store"
        - "ad-hoc"
        - "enterprise"
      is_required: true
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Xcode Project (or Workspace) path
      description: The path where the `.xcodeproj` / `.xcworkspace` is located.
      is_required: true
  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme name
      description: The Xcode Scheme to use.
      is_required: true
  - configuration:
    opts:
      title: Configuration name
      description: |-
        The Xcode Configuration to use.
        By default your Scheme defines which Configuration (for example, Debug, Release) should be used,
        but you can overwrite it with this option.
  - min_profile_days_valid: 0
    opts:
      title: The minimum days the Provisioning Profile should be valid
      description: |-
        Sometimes you want to sign an app with a Provisioning Profile that is valid for at least 'x' days.
        For example, an enterprise app won't open if your Provisioning Profile is expired. With this parameter, you can have a Provisioning Profile that's at least valid for 'x' days.
        By default it is set to `0` and renews the Provisioning Profile when expired.
      is_required: false
  - verbose_log: "no"
    opts:
      category: Debug
      title: Enable verbose logging?
      description: Enable verbose logging?
      is_required: true
      value_options:
        - "yes"
        - "no"
  - certificate_urls: $BITRISE_CERTIFICATE_URL
    opts:
      category: Debug
      title: Certificate URL
      description: |
        URLs of the certificates to download.
        Multiple URLs can be specified, separated by a pipe (`|`) character,
        you can specify a local path as well, using the `file://` scheme.
        __Provide a development certificate__ URL, to ensure development code signing files for the project and __also provide a distribution certificate__ URL, to ensure distribution code signing files for your project, for example, `file://./development/certificate/path|https://distribution/certificate/url`
      is_required: true
      is_sensitive: true
  - passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
    opts:
      category: Debug
      title: Certificate passphrase
      description: |
        Certificate passphrases.
        Multiple passphrases can be specified, separated by a pipe (`|`) character.
        __Specified certificate passphrase count should match the count of the certificate urls__,for example, (1 certificate with empty passphrase, 1 certificate with non-empty passphrase): `|distribution-passphrase`
      is_required: true
      is_sensitive: true
  - keychain_path: $HOME/Library/Keychains/login.keychain
    opts:
      category: Debug
      title: Keychain path
      description: The Keychain path.
      is_required: true
  - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
    opts:
      category: Debug
      title: Keychain's password
      description: The Keychain's password.
      is_required: true
      is_sensitive: true
  - build_api_token: $BITRISE_BUILD_API_TOKEN
    opts:
      title: Build API token
      description: |-
        Every build gets a temporary Bitrise API token to download the connected API key in a JSON file.
      is_dont_change_value: true
  - build_url: $BITRISE_BUILD_URL
    opts:
      title: Build URL
      description: |-
        URL of the current build or local path URL to your apple_developer_portal_data.json.
      is_dont_change_value: true
outputs:
  - BITRISE_EXPORT_METHOD:
    opts:
      title: "The selected distribution type"
      description: |-
        Distribution type can be one of the following: `development`, `app-store`, `ad-hoc` or `enterprise`.
  - BITRISE_DEVELOPER_TEAM:
    opts:
      title: "The development team's ID"
      description: |-
        The development team's ID, for example, `1MZX23ABCD4`.
  - BITRISE_DEVELOPMENT_CODESIGN_IDENTITY:
    opts:
      title: "The development codesign identity's name"
      description: |-
        The development codesign identity's name, for example, `iPhone Developer: Bitrise Bot (VV2J4SV8V4)`.
  - BITRISE_PRODUCTION_CODESIGN_IDENTITY:
    opts:
      title: "The production codesign identity's name"
    opts:
      title: "The production codesign identity's name"
      description: |-
        The production codesign identity's name, for example, `iPhone Distribution: Bitrise Bot (VV2J4SV8V4.
  - BITRISE_DEVELOPMENT_PROFILE:
    opts:
      title: "The main target's development provisioning profile UUID"
      description: |-
        The development provisioning profile's UUID which belongs to the main target, for example, `c5be4123-1234-4f9d-9843-0d9be985a068`.
  - BITRISE_PRODUCTION_PROFILE:
    opts:
      title: "The main target's production provisioning profile UUID"
      description: |-
        The production provisioning profile's UUID which belongs to the main target, for example, `c5be4123-1234-4f9d-9843-0d9be985a068`.
